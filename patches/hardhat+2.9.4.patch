diff --git a/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js b/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js
index ab51b5a..3f5574b 100644
--- a/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js
+++ b/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js
@@ -141,6 +141,23 @@ class JsonRpcClient {
             reward: (0, io_ts_1.optional)(t.array(t.array(base_types_1.rpcQuantity))),
         }), (res) => res.oldestBlock.addn(res.baseFeePerGas.length));
     }
+    addMissingTxParams(method, rawResult) {
+        if (
+            method.startsWith('eth_getBlock') &&
+            rawResult &&
+            rawResult.difficulty !== undefined &&
+            rawResult.totalDifficulty === undefined
+        ) {
+            rawResult.totalDifficulty = "0x0";
+        }
+        if (
+            method.startsWith('eth_getBlock') &&
+            rawResult &&
+            rawResult.uncles === undefined
+        ) {
+            rawResult.uncles = [];
+        }
+    }
     async _perform(method, params, tType, getMaxAffectedBlockNumber) {
         const cacheKey = this._getCacheKey(method, params);
         const cachedResult = this._getFromCache(cacheKey);
@@ -155,6 +172,7 @@ class JsonRpcClient {
             }
         }
         const rawResult = await this._send(method, params);
+        this.addMissingTxParams(method, rawResult);
         const decodedResult = (0, decodeJsonRpcResponse_1.decodeJsonRpcResponse)(rawResult, tType);
         const blockNumber = getMaxAffectedBlockNumber(decodedResult);
         if (this._canBeCached(blockNumber)) {
@@ -183,7 +201,13 @@ class JsonRpcClient {
             }
         }
         const rawResults = await this._sendBatch(batch);
-        const decodedResults = rawResults.map((result, i) => (0, decodeJsonRpcResponse_1.decodeJsonRpcResponse)(result, batch[i].tType));
+        const decodedResults = rawResults.map((result, i) => {
+            this.addMissingTxParams(batch[i].method, result);
+            return (0, decodeJsonRpcResponse_1.decodeJsonRpcResponse)(
+                result,
+                batch[i].tType
+            );
+        });
         const blockNumber = getMaxAffectedBlockNumber(decodedResults);
         if (this._canBeCached(blockNumber)) {
             this._storeInCache(cacheKey, decodedResults);
